(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
$(function() {
  var bind, bind_event4feelings, c_tmpls, eid, init, lid, loading, more, pick_level, tmpls;
  tmpls = null;
  c_tmpls = null;
  eid = null;
  lid = null;
  bind_event4feelings = function() {
    $('.ui.accordion').accordion();
    return $('form').form({
      comments: {
        identifier: 'comments',
        rules: [
          {
            type: 'empty',
            prompt: 'コメントを記入してください'
          }
        ]
      }
    }, {
      inline: true
    }).api({
      action: 'update comment',
      method: 'POST',
      serializeForm: true,
      beforeSend: function(s) {
        var id;
        id = s.data.split('&')[1].split('=')[1];
        s.urlData = {
          id: id
        };
        return s;
      },
      onSuccess: function(r) {
        var id;
        console.debug('success');
        id = r.results.commented_id;
        $("#js-feeling-" + id + "-comments").append(c_tmpls(r.results));
        return $("#js-feeling-" + id).find('textarea').val('');
      },
      onFailure: function() {
        return console.debug('failure');
      }
    });
  };
  bind = function() {
    var ele, eles, n, par, params, v, _i, _len;
    params = window.location.search.substring(1).split('&');
    par = {
      id: eid
    };
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      eles = params[_i];
      ele = eles.split('=');
      n = decodeURIComponent(ele[0]);
      v = decodeURIComponent(ele[1]);
      par[n] = v;
    }
    return $.get('/api/feeling/bind', par).success(function(r) {
      $('#feelings').prepend(tmpls(r));
      if (r.results.length) {
        eid = r.results[0].id;
        if (lid === null) {
          lid = r.results[r.results.length - 1].id;
        }
        return bind_event4feelings();
      }
    }).done(function() {
      return setTimeout(bind, 10000);
    });
  };
  loading = 0;
  more = function() {
    var ele, eles, n, par, params, v, _i, _len;
    if (loading) {
      return;
    }
    params = window.location.search.substring(1).split('&');
    par = {
      last_id: lid
    };
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      eles = params[_i];
      ele = eles.split('=');
      n = decodeURIComponent(ele[0]);
      v = decodeURIComponent(ele[1]);
      par[n] = v;
    }
    loading = 1;
    return $.get('/api/feeling/more', par).success(function(r) {
      $('#feelings').append(tmpls(r));
      if (r.results.length) {
        lid = r.results[r.results.length - 1].id;
        return bind_event4feelings();
      }
    }).done(function() {
      return loading = 0;
    });
  };
  init = function() {
    setTimeout(bind, 0);
    return $(window).bottom({
      proximity: 0.05
    }).on('bottom', more);
  };
  $('select.dropdown').dropdown();
  pick_level = function(tp, v) {
    var f;
    f = $(".js-feeling .js-" + tp);
    f.find('.special.cards img.image:not(.disabled)').addClass('disabled');
    f.find("img.js-value-" + v).removeClass('disabled');
    f.find('.card.blue').removeClass('blue');
    f.find(".card.js-value-" + v).addClass('blue');
    return f.find('input[name=level]').val(v);
  };
  $('.pointing.menu .item').tab({
    context: '.feeling',
    auto: true,
    alwaysRefresh: true,
    cache: false,
    path: '/feeling',
    onTabLoad: function(tp, pa, he) {
      var $f, p, t;
      $f = $(".js-feeling .js-" + tp);
      $('.special.cards .image', ".js-feeling .js-" + tp).dimmer({
        on: 'hover'
      });
      $f.find('.button.select,.extra.content a').on('click', function() {
        var v;
        v = $(this).data('value');
        return pick_level(tp, v);
      });
      $f.find('form').form({
        level: {
          identifier: 'level',
          rules: [
            {
              type: 'empty',
              prompt: '気分を選択してください'
            }
          ]
        },
        description: {
          identifier: 'description',
          rules: [
            {
              type: 'empty',
              prompt: '進捗を記入してください'
            }
          ]
        }
      }, {
        inline: true
      }).api({
        action: 'update feeling',
        method: 'POST',
        serializeForm: true,
        beforeSend: function(s) {
          s.urlData = {
            at: $f.find('input[name=at]').val()
          };
          s.data = {
            description: $f.find('textarea').val(),
            level: $f.find('input[name=level]').val()
          };
          $f.addClass('loading');
          return s;
        },
        onSuccess: function() {
          var $tab, txt;
          $f.removeClass('loading').slideUp(200).empty().slideDown(0);
          $tab = $("a.item[data-tab=" + tp + "]");
          txt = $tab.text();
          return $tab.empty().append($('<i class="checkmark icon"></i>')).append(txt);
        },
        onFailure: function() {
          return $f.removeClass('loading').slideUp(200).empty().slideDown(0);
        }
      });
      t = $f.find('textarea');
      p = $f.find('.preview');
      return $(document).on('keyup', ".js-feeling .js-" + tp + " textarea", {}, $.debounce(1000, function() {
        if (t.val().length === 0) {
          p.empty().hide().append($('<img class="ui wireframe image" src="/images/short-paragraph.png">')).fadeIn();
          return;
        }
        return $.post('/api/feeling/wiki', {
          v: t.val()
        }, function(r) {
          return p.html(r.results.html);
        });
      }));
    }
  });
  $('#js-project').on('change', function() {
    var pid;
    pid = $(this).val();
    $('#feelings').empty();
    eid = null;
    lid = null;
    history.pushState('', null, '/feeling?project_id=' + pid);
    return bind();
  });
  $.ajax('/javascripts/views/comment.html').success(function(r) {
    return c_tmpls = Handlebars.compile(r);
  });
  return $.ajax('/javascripts/views/feelings.html').success(function(r) {
    tmpls = Handlebars.compile(r);
    return init();
  });
});



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
